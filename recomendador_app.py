import streamlit as st
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules
import pandas as pd
from io import BytesIO

# Carregar os dados
data = pd.read_csv('supermarket_sales.csv')

# Configurar o t√≠tulo
st.title("üí° Sistema Inteligente de Recomenda√ß√£o de Produtos")

# Exibir as colunas dispon√≠veis para an√°lise
columns = ['Branch', 'Gender', 'Customer type']
selected_columns = st.multiselect('Selecione as vari√°veis para segmenta√ß√£o:', columns, default=columns)

# Verificar se o usu√°rio selecionou as vari√°veis
if selected_columns:
    # Filtrar as combina√ß√µes √∫nicas de subclasses
    unique_combinations = data[selected_columns].drop_duplicates()

    # Lista para armazenar todas as recomenda√ß√µes
    all_recommendations = []

    # Loop para gerar recomenda√ß√µes por cada combina√ß√£o de subclasses
    for _, row in unique_combinations.iterrows():
        filters = {col: row[col] for col in selected_columns}
        filtered_data = data.copy()

        # Aplicar filtros de subclasses
        for col, value in filters.items():
            filtered_data = filtered_data[filtered_data[col] == value]

        # Agrupamento mais amplo
        transactions = filtered_data.groupby(['Branch', 'Customer type', 'Date'])['Product line'].apply(list).tolist()
        #st.write(f"### M√©dia de itens por transa√ß√£o para {filters}: {sum(len(t) for t in transactions) / len(transactions):.2f}")

        # Converter para formato bin√°rio
        te = TransactionEncoder()
        te_ary = te.fit(transactions).transform(transactions)
        df = pd.DataFrame(te_ary, columns=te.columns_)

        # Aplicar Apriori com suporte m√≠nimo reduzido
        frequent_itemsets = apriori(df, min_support=0.0001, use_colnames=True)

        # Gerar regras de associa√ß√£o
        rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.01, num_itemsets=len(frequent_itemsets))
        rules = rules[(rules['antecedents'].apply(len) == 1) & (rules['consequents'].apply(len) == 1)]  # Filtrar para pares
        rules = rules[rules['lift'] > 1.0]  # Filtrar regras com lift > 1.0

        # Adicionar informa√ß√µes de contexto √†s regras
        for col, value in filters.items():
            rules[col] = value

        # Adicionar as regras geradas ao DataFrame geral
        all_recommendations.append(rules)
        
        

        # Exibir Recomenda√ß√µes Humanizadas
        st.write(f"### Recomenda√ß√µes Personalizadas para {filters}:")
        top_recommendations = rules.sort_values(by='confidence', ascending=False).head(5)

        if not top_recommendations.empty:
            for _, rule in top_recommendations.iterrows():
                antecedent = list(rule['antecedents'])[0]
                consequent = list(rule['consequents'])[0]
                confidence = round(rule['confidence'] * 100, 2)
                
                # Resposta humanizada usando formata√ß√£o mais natural
                st.write(f"‚ú® **Insight**: No supermercado **{filters['Branch']}**, clientes do g√™nero **{filters['Gender']}** que s√£o **{filters['Customer type']}** frequentemente compram produtos da categoria **{antecedent}**.")
                st.write(f"üìä **Dados**: Existe uma chance de {confidence}% desses clientes tamb√©m comprarem produtos da categoria **{consequent}**.")
                st.write(f"üõí **Recomenda√ß√£o**: Considere criar campanhas que combinem essas categorias, como promo√ß√µes ou combos, para maximizar o potencial de vendas.")
                st.write("---")

        else:
            st.write("ü§∑‚Äç‚ôÇÔ∏è Nenhuma recomenda√ß√£o relevante encontrada para esta combina√ß√£o.")

    # Combinar todas as recomenda√ß√µes em um √∫nico DataFrame
    all_recommendations_df = pd.concat(all_recommendations, ignore_index=True)
    

    # Fun√ß√£o para converter DataFrame em Excel
    def convert_df_to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Recomenda√ß√µes')
        processed_data = output.getvalue()
        return processed_data

    # Baixar todas as recomenda√ß√µes
    st.write("### üì• Baixar Todas as Recomenda√ß√µes")
    if not all_recommendations_df.empty:
        excel_data = convert_df_to_excel(all_recommendations_df)
        st.download_button(label="Baixar Recomenda√ß√µes em Excel",
                           data=excel_data,
                           file_name='recomendacoes_subclasses.xlsx',
                           mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
else:
    st.write("Selecione pelo menos uma vari√°vel para segmenta√ß√£o.")
